{"version":3,"sources":["App.js","utils.js","index.js"],"names":["states","App","useState","undefined","web3","setWeb3","accounts","setAccounts","contract","setContract","bet","setBet","players","setPlayers","houseFee","setHouseFee","winners","setWinners","updateBet","a","async","Promise","methods","betCount","call","betSize","admin","currentState","all","count","size","state","parseInt","updatePlayers","getPlayers","updateWinners","getPastEvents","fromBlock","newWinners","i","length","push","returnValues","winner","prize","useEffect","resolve","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","eth","getAccounts","net","getId","networkId","deployedNetwork","Lottery","networks","Contract","abi","address","init","on","className","id","map","player","key","onSubmit","e","preventDefault","target","elements","value","createBet","send","from","htmlFor","type","onClick","toLowerCase","cancel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68dfd50c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Lottery from './contracts/Lottery.json';\nimport { getWeb3 } from './utils.js';\n\nconst states = ['IDLE', 'BETTING'];\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [bet, setBet] = useState(undefined);\n  const [players, setPlayers] = useState([]);\n  const [houseFee, setHouseFee] = useState(undefined);\n  const [winners, setWinners] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Lottery.networks[networkId];\n      const contract = new web3.eth.Contract(\n        Lottery.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const [houseFee, state] = await Promise.all([\n        contract.methods.houseFee().call(),\n        contract.methods.currentState().call()\n      ]);\n\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(contract);\n      setHouseFee(houseFee);\n      setBet({state: 0});\n    }\n    init();\n    window.ethereum.on('accountsChanged', accounts => {\n      setAccounts(accounts);\n    });\n  }, []);\n\n  const isReady = () => {\n    return (\n      typeof contract !== 'undefined' \n      && typeof web3 !== 'undefined'\n      && typeof accounts !== 'undefined'\n      && typeof houseFee !== 'undefined'\n    );\n  }\n\n  useEffect(() => {\n    if(isReady()) {\n      updateBet();\n      updatePlayers();\n      updateWinners();\n    }\n  }, [accounts, contract, web3, houseFee]);\n\n  async function updateBet() {\n    const bet = await Promise.all([\n      await contract.methods.betCount().call(),\n      await contract.methods.betSize().call(),\n      await contract.methods.admin().call(),\n      await contract.methods.currentState().call()\n    ])\n    setBet({count: bet[0], size: bet[1], admin: bet[2], state: parseInt(bet[3])});\n  }\n\n  async function updatePlayers() {\n    const players = await contract.methods.getPlayers().call();\n    setPlayers(players);\n  }\n\n  async function updateWinners() {\n    const winners = await contract.getPastEvents('LottoEnded', {fromBlock: 0});\n    let newWinners = [];\n    for(let i=0; i<winners.length; i++){\n      newWinners.push([\n         winners[i].returnValues.winner,\n         winners[i].returnValues.prize,\n         winners[i].returnValues.players\n        ]);\n    }\n    setWinners(newWinners);\n  }\n\n  async function createBet(e) {\n    e.preventDefault();\n    const betCount = e.target.elements[0].value;\n    const betSize = e.target.elements[1].value;\n    await contract.methods.createBet(betCount, betSize).send({from: accounts[0]});\n    await updateBet();\n    await updatePlayers();\n\n    \n  };\n\n  async function cancel() {\n    await contract.methods.cancel().send({from: accounts[0]});\n    await updateBet();\n  };\n\n  async function doBet() {\n    \n    await contract.methods.bet().send({from: accounts[0], value: bet.size});\n    await updateBet();\n    await updatePlayers();\n    await updateWinners();\n  };\n\n  if(!bet || typeof bet.state === 'undefined') {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"container text-center\">\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          \n        <ul className=\"navbar-nav px-3\">\n          <li className = \"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\" className=\"text-white text-right\">Current Account: {accounts[0]}</small>\n            </small>\n          </li>\n        </ul>\n      </nav>\n      <h1 className=\"text-center mt-5\">Lottery</h1>\n\n      <p>House Fee: {houseFee}% of Bet</p>\n      <p>State of Bet: <b>{states[bet.state]}</b></p>\n      {bet.state === 1 ? (\n        <>\n          <p>Bet Size: {bet.size} Wei</p>\n          <p>Player Count: {bet.count}</p>\n          <div>\n            <h2>Players in Bet</h2>\n            <ul>\n              {players.map(player => <li key={player}>{player}</li>)}\n            </ul>\n          </div>\n        </>\n      ) : null}\n\n      {bet.state === 0  ? (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <h2>Create bet</h2>\n            <form onSubmit={e => createBet(e)}>\n              <div className=\"form-group\">\n                <label htmlFor=\"count\">Player Count</label>\n                <input type=\"text\" className=\"form-control\" id=\"count\" />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"size\">Bet Size (Wei)</label>\n                <input type=\"text\" className=\"form-control\" id=\"size\" />\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </form>\n          </div>\n        </div>\n      ) : null}\n\n        {bet.state === 1 ? (\n            <div className=\"row text-center\">\n              <div className=\"col-sm-12\">\n                <h2>Bet</h2>\n                  <button \n                    onClick={e => doBet()}\n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                  >\n                    Bet\n                  </button>\n              </div>\n            </div>\n          ) : null}\n\n      {bet.state === 1 \n       && accounts[0].toLowerCase() === bet.admin.toLowerCase() ? (\n        <div className=\"row\">\n          <div className=\"col-sm-12\">\n            <h2>Cancel bet</h2>\n              <button \n                onClick={e => cancel()}\n                type=\"submit\" \n                className=\"btn btn-primary\"\n              >\n                Cancel\n              </button>\n          </div>\n        </div>\n      ) : null}\n\n      \n      <p><b>Past Winners of Bets</b></p>\n        <ol>\n              {winners.map(winner => <li key={winner}><b>Winner</b> : {winner[0]}\n               <p>Prize: {winner[1]} Wei</p>\n               <p>Number of Players: {winner[2]}</p></li>)}\n        </ol>\n    </div>\n  );\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () => {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://localhost:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n};\n\nexport { getWeb3 };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}